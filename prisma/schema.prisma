generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model teachers {
  id                  Int                 @id @default(autoincrement())
  name                String              @db.VarChar(255)
  email               String              @unique @db.VarChar(255)
  mobile_number       String?             @db.VarChar(15)
  is_deleted          Boolean             @default(false)
  is_active           Boolean             @default(true)
  password            String              @db.VarChar(255)
  created_at          DateTime            @default(now()) @db.Timestamp(0)
  updated_at          DateTime            @default(now()) @updatedAt @db.Timestamp(0)
  need_password_reset Boolean
  school_id           Int
  teacherId           String              @db.VarChar(30)
  students            students[]
  standards           teacher_standards[]
  school              schools             @relation(fields: [school_id], references: [id])

  @@unique([email, school_id, teacherId], name: "teacherUniqueIdentifiers")
  @@index([school_id], map: "teachers_school_id_fkey")
}

model admins {
  id           Int      @id @default(autoincrement())
  name         String   @db.VarChar(255)
  email        String   @unique @db.VarChar(255)
  is_deleted   Boolean  @default(false)
  mobileNumber String?
  is_active    Boolean  @default(true)
  password     String   @db.VarChar(255)
  created_at   DateTime @default(now()) @db.Timestamp(0)
  updated_at   DateTime @default(now()) @updatedAt @db.Timestamp(0)
  school_id    Int
  school       schools  @relation(fields: [school_id], references: [id])

  @@unique([email, school_id], name: "adminUniqueIdentifier")
  @@index([school_id], map: "admins_school_id_fkey")
}

model students {
  id                      Int             @id @default(autoincrement())
  admission_number        String          @db.VarChar(50)
  name                    String          @db.VarChar(255)
  primary_mobile_no       String          @db.VarChar(15)
  alternate_mobile_number String?         @db.VarChar(15)
  father_name             String          @db.VarChar(100)
  mother_name             String?         @db.VarChar(100)
  parent_email            String?         @db.VarChar(100)
  email                   String?         @db.VarChar(45)
  password                String          @db.VarChar(255)
  is_deleted              Boolean         @default(false)
  is_active               Boolean         @default(true)
  academic_year_id        Int?
  standard_id             Int?
  teacher_id              Int?
  created_at              DateTime        @default(now()) @db.Timestamp(0)
  updated_at              DateTime        @default(now()) @updatedAt @db.Timestamp(0)
  school_id               Int
  fees_details            fees_details[]
  academic_year           academic_years? @relation(fields: [academic_year_id], references: [id])
  school                  schools         @relation(fields: [school_id], references: [id])
  standard                standards?      @relation(fields: [standard_id], references: [id])
  teacher                 teachers?       @relation(fields: [teacher_id], references: [id])

  @@unique([admission_number, school_id], name: "studentSchoolIdentifier")
  @@index([academic_year_id], map: "students_academic_year_id_fkey")
  @@index([school_id], map: "students_school_id_fkey")
  @@index([standard_id], map: "students_standard_id_fkey")
  @@index([teacher_id], map: "students_teacher_id_fkey")
}

model fees_details {
  id                Int                @id @default(autoincrement())
  standard_id       Int
  student_id        Int
  term              Int
  academic_year_id  Int?
  due_date          String
  payed_through     String?            @db.VarChar(50)
  transaction_id    String?            @unique @db.VarChar(64)
  sc_fees           Float
  is_deleted        Boolean            @default(false)
  is_active         Boolean            @default(true)
  total_amount      Float
  is_paid           Boolean            @default(false)
  created_at        DateTime           @default(now()) @db.Timestamp(0)
  updated_at        DateTime           @default(now()) @updatedAt @db.Timestamp(0)
  school_id         Int
  total_payable     Float
  academic_year     academic_years?    @relation(fields: [academic_year_id], references: [id])
  school            schools            @relation(fields: [school_id], references: [id])
  standard          standards          @relation(fields: [standard_id], references: [id])
  student           students           @relation(fields: [student_id], references: [id])
  fees_transactions fees_transaction[]

  @@unique([academic_year_id, term, student_id, school_id], name: "studentFeesUniqueIndex")
  @@index([school_id], map: "fees_details_school_id_fkey")
  @@index([standard_id], map: "fees_details_standard_id_fkey")
  @@index([student_id], map: "fees_details_student_id_fkey")
}

model fees_transaction {
  id                        Int          @id @default(autoincrement())
  transaction_id            String?      @db.VarChar(50)
  pg_transaction_id         String?      @db.VarChar(50)
  pg_service_transaction_id String?      @db.VarChar(50)
  bank_transaction_id       String?      @db.VarChar(50)
  pg_authorization_code     String?      @db.VarChar(50)
  client_transaction_id     String?      @db.VarChar(50)
  arn_id                    String?      @db.VarChar(50)
  bank_id                   String?      @db.VarChar(50)
  fee_detail_id             Int
  is_deleted                Boolean      @default(false)
  is_active                 Boolean      @default(true)
  transaction_date          DateTime
  utr_number                String?      @db.VarChar(50)
  payment_mode              String       @db.VarChar(50)
  amount_paid               Float
  created_at                DateTime     @default(now()) @db.Timestamp(0)
  updated_at                DateTime     @default(now()) @updatedAt @db.Timestamp(0)
  school_id                 Int
  order_id                  String?
  payment_id                String?
  pg_gateway                String?
  wallet_provider           String?
  fees_detail               fees_details @relation(fields: [fee_detail_id], references: [id])
  school                    schools      @relation(fields: [school_id], references: [id])

  @@index([fee_detail_id], map: "fees_transaction_fee_detail_id_fkey")
  @@index([school_id], map: "fees_transaction_school_id_fkey")
}

model standards {
  id                Int                @id @default(autoincrement())
  section           String             @db.VarChar(10)
  standard          String             @db.VarChar(10)
  school_id         Int
  is_deleted        Boolean            @default(false)
  is_active         Boolean            @default(true)
  created_at        DateTime           @default(now()) @db.Timestamp(0)
  updated_at        DateTime           @default(now()) @updatedAt @db.Timestamp(0)
  fees_details      fees_details[]
  school            schools            @relation(fields: [school_id], references: [id])
  students          students[]
  teacher_standards teacher_standards?

  @@unique([section, standard, school_id], name: "standardsUniqueConstrain")
  @@index([school_id], map: "standards_school_id_fkey")
}

model teacher_standards {
  id          Int        @id @default(autoincrement())
  standard_id Int?       @unique
  teacher_id  Int
  is_deleted  Boolean    @default(false)
  is_active   Boolean    @default(true)
  school_id   Int
  created_at  DateTime   @default(now()) @db.Timestamp(0)
  updated_at  DateTime   @default(now()) @updatedAt @db.Timestamp(0)
  school      schools    @relation(fields: [school_id], references: [id])
  standard    standards? @relation(fields: [standard_id], references: [id])
  teacher     teachers   @relation(fields: [teacher_id], references: [id])

  @@unique([standard_id, teacher_id, school_id], name: "teacherStandardUniqueIdentifiers")
  @@unique([standard_id, school_id], name: "teacherSchoolIdentifiers")
  @@index([school_id], map: "teacher_standards_school_id_fkey")
  @@index([teacher_id], map: "teacher_standards_teacher_id_fkey")
}

model academic_years {
  id                  Int            @id @default(autoincrement())
  academic_year_from  Int
  academic_year_to    Int
  academic_month_from Int
  academic_month_to   Int
  school_id           Int
  is_deleted          Boolean        @default(false)
  is_active           Boolean        @default(true)
  created_at          DateTime       @default(now()) @db.Timestamp(0)
  updated_at          DateTime       @default(now()) @updatedAt @db.Timestamp(0)
  school              schools        @relation(fields: [school_id], references: [id])
  fees_details        fees_details[]
  students            students[]

  @@unique([academic_year_from, academic_year_to, school_id, academic_month_from, academic_month_to], name: "acdyUniqueIdentifier")
  @@index([school_id], map: "academic_years_school_id_fkey")
}

model schools {
  id                        Int                 @id @default(autoincrement())
  name                      String              @unique @db.VarChar(255)
  address                   String              @db.VarChar(255)
  Street                    String              @db.VarChar(100)
  country_id                Int
  state_id                  Int
  is_deleted                Boolean             @default(false)
  academic_year_start_month Int                 @default(4)
  academic_year_end_month   Int                 @default(3)
  is_active                 Boolean             @default(true)
  city                      String              @db.VarChar(255)
  pincode                   String              @db.VarChar(10)
  created_at                DateTime            @default(now()) @db.Timestamp(0)
  updated_at                DateTime            @default(now()) @updatedAt @db.Timestamp(0)
  academic_years            academic_years[]
  admins                    admins[]
  fees_details              fees_details[]
  fees_transactions         fees_transaction[]
  country                   countries           @relation(fields: [country_id], references: [id])
  state                     states              @relation(fields: [state_id], references: [id])
  standards                 standards[]
  students                  students[]
  teacher_standards         teacher_standards[]
  teachers                  teachers[]

  @@index([country_id], map: "schools_country_id_fkey")
  @@index([state_id], map: "schools_state_id_fkey")
}

model states {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  code       String    @unique
  is_deleted Boolean   @default(false)
  is_active  Boolean   @default(true)
  tin        String    @unique
  country_id Int
  schools    schools[]
  country    countries @relation(fields: [country_id], references: [id])

  @@index([country_id], map: "states_country_id_fkey")
}

model countries {
  id                   Int       @id @default(autoincrement())
  name                 String    @unique
  code                 String    @unique
  is_deleted           Boolean   @default(false)
  is_active            Boolean   @default(true)
  iso_code             String    @unique
  currency_code        String    @unique
  currency_symbol      String    @unique
  currency_symbol_text String
  schools              schools[]
  states               states[]
}
